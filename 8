#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <fcntl.h>

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Uso: %s <comando>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    pid_t pid, sid;

    // Crear un nuevo proceso
    pid = fork();

    // Manejar errores de fork
    if (pid < 0) {
        perror("Fork error");
        exit(EXIT_FAILURE);
    }

    // Si estamos en el proceso padre, terminamos
    if (pid > 0) {
        printf("Proceso padre (PID = %d) terminando.\n", getpid());
        exit(EXIT_SUCCESS);
    }

    // Crear una nueva sesi√≥n
    sid = setsid();

    // Manejar errores de setsid
    if (sid < 0) {
        perror("Setsid error");
        exit(EXIT_FAILURE);
    }

    // Cambiar el directorio de trabajo a /tmp
    if (chdir("/tmp") < 0) {
        perror("Chdir error");
        exit(EXIT_FAILURE);
    }

    // Redirigir stdout y stderr a archivos
    int out_fd = open("/tmp/daemon.out", O_WRONLY | O_CREAT | O_APPEND, 0666);
    int err_fd = open("/tmp/daemon.err", O_WRONLY | O_CREAT | O_APPEND, 0666);
    dup2(out_fd, STDOUT_FILENO);
    dup2(err_fd, STDERR_FILENO);

    // Redirigir stdin a /dev/null
    int null_fd = open("/dev/null", O_RDONLY);
    dup2(null_fd, STDIN_FILENO);

    // Ejecutar el programa usando execvp
    execvp(argv[1], &argv[1]);

    perror("Exec error");
    exit(EXIT_FAILURE);
}
