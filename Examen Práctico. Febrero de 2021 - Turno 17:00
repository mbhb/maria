2.
RECUERDA:size_t longitud = strcspn(buf, "\r\n");
        buf[longitud] = '\0';

/HOME/UBUNTU/LOQUESEA

#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netdb.h>
#include <sys/stat.h>


#define BUF_SIZE 500

int main(int argc, char *argv[])
{
    struct addrinfo hints;
    struct addrinfo *result, *rp;
    int sfd, s;
    struct sockaddr_storage peer_addr;
    socklen_t peer_addr_len;
    ssize_t nread;
    char buf[BUF_SIZE];
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
    hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
    hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */
    hints.ai_protocol = 0;          /* Any protocol */
    hints.ai_canonname = NULL;
    hints.ai_addr = NULL;
    hints.ai_next = NULL;

    s = getaddrinfo(argv[1], argv[2], &hints, &result);
    if (s != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
        exit(EXIT_FAILURE);
    }
    for (rp = result; rp != NULL; rp = rp->ai_next) {
        sfd = socket(rp->ai_family, rp->ai_socktype,
                rp->ai_protocol);
        if (sfd == -1)
            continue;

        if (bind(sfd, rp->ai_addr, rp->ai_addrlen) == 0)
            break;                  /* Success */

        close(sfd);
    }

    freeaddrinfo(result);           /* No longer needed */

    if (rp == NULL) {               /* No address succeeded */
        fprintf(stderr, "Could not bind\n");
        exit(EXIT_FAILURE);
    }

    /* Read datagrams and echo them back to sender */
    for (;;) {
        peer_addr_len = sizeof(peer_addr);
        nread = recvfrom(sfd, buf, BUF_SIZE, 0,(struct sockaddr *) &peer_addr, &peer_addr_len);
        if (nread == -1)
            continue;               /* Ignore failed request */
        size_t longitud = strcspn(buf, "\r\n");
        buf[longitud] = '\0';

        char host[NI_MAXHOST], service[NI_MAXSERV];

        s = getnameinfo((struct sockaddr *) &peer_addr,peer_addr_len, host, NI_MAXHOST, service, NI_MAXSERV, NI_NUMERICHOST);
        if (s == 0)
            printf("Received from %s:%s\n", host, service);
        else
            fprintf(stderr, "getnameinfo: %s\n", gai_strerror(s));

        struct stat sb;
        printf("Ruta del archivo: %s\n", buf);
        

        if (lstat(buf, &sb) == -1) {
               perror("lstat");
               exit(EXIT_FAILURE);
           }

char mensaje[100];  // Tamaño suficientemente grande para las cadenas más largas

switch (sb.st_mode & S_IFMT) {
    case S_IFLNK:
        strncpy(mensaje, "symlink\n", sizeof(mensaje));
        break;
    case S_IFREG:
        strncpy(mensaje, "regular file\n", sizeof(mensaje));
        break;
    case S_IFSOCK:
        strncpy(mensaje, "socket\n", sizeof(mensaje));
        break;
    default:
        strncpy(mensaje, "unknown?\n", sizeof(mensaje));
        break;
}

sendto(sfd, mensaje, sizeof(mensaje), 0, (struct sockaddr *) &peer_addr, peer_addr_len);


    }
}
