Ejercicio 7. Escribir el cliente para conectarse con el servidor del ejercicio anterior. 
El cliente recibirá la dirección y el puerto del servidor como argumentos y, una vez establecida la conexión con el servidor, 
le enviará lo que el usuario escriba por teclado. Mostrará en la consola la respuesta recibida desde el servidor. 
Cuando el usuario escriba el carácter ‘Q’ como único carácter de una línea, el cliente cerrará la conexión con el servidor y terminará.

#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define BUF_SIZE 500

int
main(int argc, char *argv[])
{
    struct addrinfo hints;
    struct addrinfo *result, *rp;
    int sfd, s;
    size_t len;
    ssize_t nread;
    char buf[BUF_SIZE];

    if (argc < 3) {
        fprintf(stderr, "Usage: %s host port msg...\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    /* Obtain address(es) matching host/port */
  memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = 0;
    hints.ai_protocol = 0;          /* Any protocol */

    s = getaddrinfo(argv[1], argv[2], &hints, &result);
    if (s != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
        exit(EXIT_FAILURE);
    }

    /* getaddrinfo() returns a list of address structures.
       Try each address until we successfully connect(2).
       If socket(2) (or connect(2)) fails, we (close the socket
       and) try the next address. */

   sfd = socket(result->ai_family, result->ai_socktype,result->ai_protocol);
    connect(sfd, result->ai_addr, result->ai_addrlen);
    
    freeaddrinfo(result);     

     while(1){
         int size=read(0,buf,0777);
         buf[size]='\0';
         if(buf[0]=='Q'){
             close(sfd);
             break;
         }else{
             send(sfd,buf,size,0);
             int bytes=recv(sfd,buf,100,0);
             buf[bytes]='\0';
             printf("Servidor envia: %s\n",buf);
         }
     }

        
    
    return 0;
}
