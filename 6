#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netdb.h>

#define BUF_SIZE 500

int main(int argc, char *argv[])
{
    struct addrinfo hints;
    struct addrinfo *result;
    int sfd, s;
    struct sockaddr_storage peer_addr;
    socklen_t peer_addr_len;
    int nread;
    char buf[BUF_SIZE];
    if(argc<3){
        printf("Errror en los argumentos\n");
        return -1;
    }

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
    hints.ai_socktype = SOCK_STREAM ;
    hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */
    hints.ai_protocol = 0;          /* Any protocol */
    hints.ai_canonname = NULL;
    hints.ai_addr = NULL;
    hints.ai_next = NULL;

    s = getaddrinfo(argv[1], argv[2], &hints, &result);
    sfd = socket(result->ai_family, result->ai_socktype,result->ai_protocol);
    bind(sfd, result->ai_addr, result->ai_addrlen) ;
    listen(sfd, 5);
    freeaddrinfo(result);           /* No longer needed */


    /* Read datagrams and echo them back to sender */

    while(1) {
        int n=0;
        peer_addr_len = sizeof(peer_addr);
        char host[NI_MAXHOST], service[NI_MAXSERV];
        nread=accept(sfd, (struct sockaddr *) &peer_addr, &peer_addr_len);
        getnameinfo((struct sockaddr *) &peer_addr, peer_addr_len, host, NI_MAXHOST, service, NI_MAXSERV, NI_NUMERICHOST);
        printf("Conexion de %s:%s\n",host,service);
        while( (n=recv(nread, buf, 80, 0))!=0){
        send(nread, buf, n,0);
        }
        if(n==0){
            break;
        }
        close(nread);
    }
     printf("Conexion finalizada\n");
     close(sfd);
    return 0;
 }
