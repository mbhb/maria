#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netdb.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 500



int main(int argc, char *argv[]){
    struct addrinfo hints;
    struct addrinfo *result;
    int s, sfd;

    if(argc<3){
        printf("Errror en los argumentos\n");
        return -1;
    }
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
    hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
    hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */
    hints.ai_protocol = 0;          /* Any protocol */
    hints.ai_canonname = NULL;
    hints.ai_addr = NULL;
    hints.ai_next = NULL;

    s = getaddrinfo(argv[1], argv[2], &hints, &result);
    if (s != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
        exit(EXIT_FAILURE);
    }

    sfd = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    bind(sfd, result->ai_addr, result->ai_addrlen);
    freeaddrinfo(result);   

    while(1){
        fd_set set;
        struct sockaddr_storage peer_addr;
        socklen_t peer_addr_len;
        char buf[BUF_SIZE];
        char host[NI_MAXHOST];
        FD_ZERO(&set);
        FD_SET(sfd,&set);
        FD_SET(0,&set);
        select(sfd+1,&set,0,0,0);
/*
        peer_addr_len = sizeof(peer_addr);
        int nread = recvfrom(sfd, buf, BUF_SIZE, 0,(struct sockaddr *) &peer_addr, &peer_addr_len);
        buf[nread]='\0';
        char host[NI_MAXHOST], service[NI_MAXSERV];
        getnameinfo((struct sockaddr *) &peer_addr,peer_addr_len, host, NI_MAXHOST,service, NI_MAXSERV, 0);
        printf("Received from %s:%s\n",host, service);

        */
        if(FD_ISSET(sfd,&set)){
        peer_addr_len = sizeof(peer_addr);
        int nread = recvfrom(sfd, buf, BUF_SIZE, 0,(struct sockaddr *) &peer_addr, &peer_addr_len);

        char host[NI_MAXHOST], service[NI_MAXSERV];

        s = getnameinfo((struct sockaddr *) &peer_addr, peer_addr_len, host, NI_MAXHOST,service, NI_MAXSERV,NI_NUMERICHOST);
        printf("Received %d bytes from %s:%s\n", nread, host, service);
        }
        else{
            read(0,buf,0777);
        }

        char t[]="t";
        char q[]="q";
        char d[]="d";
        if(q[0]==buf[0]){
            printf("Saliendo...\n");
            close(sfd);
            break;
        }else{
            char outstr[200];
            time_t ti;
            struct tm *tmp;

           ti = time(NULL);
           tmp = localtime(&ti);

           if(d[0]==buf[0]){
                 int datos= strftime(outstr, sizeof(outstr), "%x", tmp);
                 outstr[datos]='\0';
                  if(FD_ISSET(sfd,&set)){
                 sendto(sfd, outstr, strlen(outstr), 0,(struct sockaddr *) &peer_addr,peer_addr_len);
                  }
                  else{
                    printf("[CONSOLA]:%s\n", outstr);
                  }
            }
            if (t[0] == buf[0]) {
                int datos= strftime(outstr, sizeof(outstr), "%c", tmp);
                outstr[datos]='\0';
                if(FD_ISSET(sfd,&set)){
                sendto(sfd, outstr, strlen(outstr), 0,(struct sockaddr *) &peer_addr,peer_addr_len);
                }
                  else{
                    printf("[CONSOLA]:%s\n", outstr);
                  }
            }


        }
        



    }
    return 0;
}
