
2.
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netdb.h>
#include <pwd.h>



 #define BUF_SIZE 500

int
main(int argc, char *argv[])
{
    struct addrinfo hints;
    struct addrinfo *result;
    int sfd;
    struct sockaddr_storage peer_addr;
    socklen_t peer_addr_len;
    int nread;
    char buf[BUF_SIZE];

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
    hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
    hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */
    hints.ai_protocol = 0;          /* Any protocol */
    hints.ai_canonname = NULL;
    hints.ai_addr = NULL;
    hints.ai_next = NULL;

   getaddrinfo(argv[1], argv[2], &hints, &result);
    
    sfd = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    bind(sfd, result->ai_addr, result->ai_addrlen);
    

    freeaddrinfo(result);           /* No longer needed */

    /* Read datagrams and echo them back to sender */

        while(1) {
        peer_addr_len = sizeof(peer_addr);
        nread = recvfrom(sfd, buf, BUF_SIZE, 0,(struct sockaddr *) &peer_addr, &peer_addr_len);
        char host[NI_MAXHOST], service[NI_MAXSERV];
        getnameinfo((struct sockaddr *) &peer_addr, peer_addr_len, host, NI_MAXHOST,service, NI_MAXSERV, NI_NUMERICHOST);
        struct passwd *pas;
        pas = getpwuid(strcspn(buf, "\r\n"));
        if(nread>0){
        printf("Received from %s:%s\n", host, service);
        sendto(sfd, pas->pw_dir, strlen(pas->pw_dir), 0,(struct sockaddr *) &peer_addr, peer_addr_len);
        }
    }
    close(sfd);
}
3.
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/select.h>

#define BUFFER_SIZE 256

int main(){
    mkfifo("t1", 0777);
    mkfifo("t2", 0777);
    int fd1 = open("t1", O_RDONLY | O_NONBLOCK);
    int fd2 = open("t2", O_RDONLY | O_NONBLOCK);

    // Descriptor para el conjunto de descriptores de archivos
    fd_set readfds;

    while(1){
        // Limpiar y configurar el conjunto de descriptores de archivos
        FD_ZERO(&readfds);
        FD_SET(fd1, &readfds);
        FD_SET(fd2, &readfds);

        // Configurar el valor más alto del descriptor de archivos
        int maxfd = (fd1 > fd2) ? fd1 : fd2;

        // Esperar hasta que haya datos listos para leer en alguna de las tuberías
        select(maxfd + 1, &readfds, NULL, NULL, NULL);

        // Verificar si hay datos listos para leer en la primera tubería
        if (FD_ISSET(fd1, &readfds)) {
            char buffer[BUFFER_SIZE];
            ssize_t bytesRead = read(fd1, buffer, BUFFER_SIZE);

            if (bytesRead > 0) {
                buffer[bytesRead] = '\0';
                printf("Leyendo de t1: %s\n", buffer);
            } else if (bytesRead == 0) {
                // El escritor ha cerrado la tubería, cerrar y volver a abrir
                close(fd1);
                fd1 = open("t1", O_RDONLY | O_NONBLOCK);
            }
        }

        // Verificar si hay datos listos para leer en la segunda tubería
        if (FD_ISSET(fd2, &readfds)) {
            char buffer[BUFFER_SIZE];
            ssize_t bytesRead = read(fd2, buffer, BUFFER_SIZE);

            if (bytesRead > 0) {
                buffer[bytesRead] = '\0';
                printf("Leyendo de t2: %s\n", buffer);
            } else if (bytesRead == 0) {
                // El escritor ha cerrado la tubería, cerrar y volver a abrir
                close(fd2);
                fd2 = open("t2", O_RDONLY | O_NONBLOCK);
            }
        }

        // Pequeño retraso para evitar uso intensivo de CPU
        usleep(10000); // 10 milisegundos
    }

    // Nunca deberíamos llegar aquí en un bucle infinito
    // Pero cerramos las tuberías y salimos del programa
    close(fd1);
    close(fd2);

    return 0;
}
