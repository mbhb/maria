2.
 #include <sys/types.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    #include <sys/socket.h>
    #include <netdb.h>

    #define BUF_SIZE 500

int main(int argc, char *argv[]){
    struct addrinfo hints;
    struct addrinfo *result;
    int sfd, cfd;
    struct sockaddr_storage peer_addr;
    socklen_t peer_addr_len;
    int nread;
    char buf[BUF_SIZE];

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
    hints.ai_socktype = SOCK_STREAM; /*  socket */
    hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */
    hints.ai_protocol = 0;          /* Any protocol */
    hints.ai_canonname = NULL;
    hints.ai_addr = NULL;
    hints.ai_next = NULL;

    getaddrinfo(argv[1], argv[2], &hints, &result);
    sfd=socket(result->ai_family, result->ai_socktype,result->ai_protocol);
    bind(sfd, result->ai_addr, result->ai_addrlen);
    freeaddrinfo(result);           /* No longer needed */
    listen(sfd,5);

/* Read datagrams and echo them back to sender */

    while(1) {
        peer_addr_len = sizeof(peer_addr);
        cfd = accept(sfd, (struct sockaddr *) &peer_addr, &peer_addr_len);
        
        char host[NI_MAXHOST], service[NI_MAXSERV];
        getnameinfo((struct sockaddr *) &peer_addr,peer_addr_len, host, NI_MAXHOST,service, NI_MAXSERV, NI_NUMERICHOST);
        printf("Received from %s:%s\n", host, service);
        while(nread=recv(cfd, buf, BUF_SIZE, 0)!=0)
        send(cfd, buf, nread, 0);
        
    }
    close(cfd);
    close(sfd);
}

3.RECUERDA: char *cmd1[]={argv[1],argv[2],NULL}, execvp(cmd2[0],cmd2);, char *cmd2[]={argv[3],argv[4],NULL};
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int
main(int argc, char *argv[])
{
    char *cmd1[]={argv[1],argv[2],NULL};
    char *cmd2[]={argv[3],argv[4],NULL};
    int pipefd[2];
    pid_t cpid;
    char buf;
    pipe(pipefd);
    cpid = fork();
    if(cpid==0)
    {
        close(pipefd[1]);
        // Redirigir la entrada estándar al descriptor de lectura de la tubería
        printf("soy: %d\n",getpid());
        dup2(pipefd[0], STDIN_FILENO);
        close(pipefd[0]);
        execvp(cmd2[0],cmd2);
        exit(EXIT_SUCCESS);

    }
    else{
        printf("soy: %d\n",getpid());
        close(pipefd[0]);
        dup2(pipefd[1], STDIN_FILENO);
        close(pipefd[1]);
        execvp(cmd1[0],cmd1);
        exit(EXIT_SUCCESS);
    }
    return 0;
}
