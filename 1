#include <stdio.h>
#include <sys/socket.h>
#include <netdb.h>
#include <sys/types.h>
#include <string.h>

int main(int argc, char **argv)
{
    // Verifica que se proporcionen al menos dos argumentos (nombre del programa y nombre de host/servicio).
    if (argc < 3) {
        printf("Error en los argumentos\n");
        return -1;
    }

    // Estructura para especificar criterios en getaddrinfo.
    struct addrinfo hints;

    // Estructura para almacenar los resultados de getaddrinfo.
    struct addrinfo *result;

    // Limpia la estructura hints.
    memset(&hints, 0, sizeof(struct addrinfo));

    // Configura los criterios para obtener direcciones de cualquier familia (IPv4 o IPv6),
    // tipo de socket stream y flags AI_PASSIVE (para uso en bind).
    hints.ai_flags = AI_PASSIVE;
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;

    // Llama a getaddrinfo para obtener la información sobre la dirección y el servicio especificados.
    int rc = getaddrinfo(argv[1], argv[2], &hints, &result);
    if (rc != 0) {
        perror("Error en getaddrinfo: ");
        return -1;
    }

    // Itera a través de los resultados obtenidos.
    for (struct addrinfo *i = result; i != NULL; i = i->ai_next) {
        char host[NI_MAXHOST];
        char serv[NI_MAXSERV];

        // Obtiene información legible sobre la dirección y el servicio.
        getnameinfo(i->ai_addr, i->ai_addrlen, host, NI_MAXHOST, serv, NI_MAXSERV, NI_NUMERICHOST | NI_NUMERICSERV);

        // Imprime la información obtenida.
        printf("%s %s %i %i\n", host, serv, i->ai_family, i->ai_socktype);
    }

    // Libera la memoria reservada por getaddrinfo.
    freeaddrinfo(result);

    return 0;
}
